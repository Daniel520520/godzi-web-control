#ifndef GODZIWEBCONTROL_IMAGELAYER_H
#define GODZIWEBCONTROL_IMAGELAYER_H


#include <GodziWebControl/Export>
#include <GodziWebControl/Command>

#include <osg/observer_ptr>

#include <osgEarth/ImageLayer>

#include <string>


namespace GodziWebControl
{
    class GODZIWEBCONTROL_EXPORT MapControl;

    class UpdateImageLayerCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        
        UpdateImageLayerCommand(int id, const std::string &name, const CommandArguments& args, double opacity=1.0, bool visible=true, bool visibleSet=false) :
            _id(id), _name(name), _args(args), _opacity(opacity), _visible(visible), _visibleSet(visibleSet) { }
          
        virtual bool operator()(MapControl* map);
        
    protected:
        const CommandArguments _args;
        int _id;
        std::string _name;
        double _opacity;
        bool _visible;
        bool _visibleSet;
    };
    
    class MoveImageLayerCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        
        MoveImageLayerCommand(int id, int index=-1) : _id(id), _index(index) { }
        virtual bool operator()(MapControl* map);
        
    protected:
        int _id;
        int _index;
    };

    class RemoveImageLayerCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        
        RemoveImageLayerCommand(int id) : _id(id) { }
        virtual bool operator()(MapControl* map);
        
    protected:
        int _id;
    };

    class GetImageLayersCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        
        GetImageLayersCommand() { }
        virtual bool operator()(MapControl* map);
    };

    class GetImageLayerPropertiesCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        
        GetImageLayerPropertiesCommand(int id) : _id(id) { }
        virtual bool operator()(MapControl* map);
        
    protected:
        int _id;
    };
}
#endif GODZIWEBCONTROL_IMAGELAYER_H