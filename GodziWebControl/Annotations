#ifndef GODZIWEBCONTROL_ANNOTATIONS_H
#define GODZIWEBCONTROL_ANNOTATIONS_H


#include <GodziWebControl/Export>
#include <GodziWebControl/Command>

#include <osg/MatrixTransform>
#include <osg/Vec4f>
#include <osg/observer_ptr>
#include <string>

#include <osgEarth/GeoData>
#include <osgEarth/Units>
#include <osgEarthSymbology/Geometry>
#include <osgEarthSymbology/Style>


/**
 * Annotation commands - hooks into the osgEarth::Annotations framework.
 */
namespace GodziWebControl
{
    using namespace osgEarth;
    using namespace osgEarth::Symbology;


    class GODZIWEBCONTROL_EXPORT MapControl;

    /**
     * Registration agent.
     */
    class AnnotationCommands
    {
    public:
        static void registerAll( MapControl* map );
    };


    /**
     * Creates a LabelNode annotation.
     */
    class CreateLabelNodeCommand : public Command
    {
    public:
        CreateLabelNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            const std::string& text,
            const Style&       style,
            bool               visible=true );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        std::string _text;
        Style       _style;
        bool        _visible;
    };


    /**
     * Creates a PlaceNode annotation.
     */
    class CreatePlaceNodeCommand : public Command
    {
    public:
        CreatePlaceNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            const std::string& text,
            const std::string& iconURI,
            const Style&       style,
            bool               visible=true );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        Style       _style;
        std::string _text, _iconURI;
        bool        _visible;
    };


    /**
     * Creates a CircleNode annotation.
     */
    class CreateCircleNodeCommand : public Command
    {
    public:
        CreateCircleNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            const Distance&    radius,
            const Style&       style,
            bool               visible=true );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        Distance    _radius;
        Style       _style;
        bool        _visible;
    };


    /**
     * Creates an EllipseNode annotation.
     */
    class CreateEllipseNodeCommand : public Command
    {
    public:
        CreateEllipseNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            const Distance&    radiusMajor,
            const Distance&    radiusMinor,
            const Angle&       rotation,
            const Style&       style,
            bool               visible=true );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        Distance    _radiusMajor, _radiusMinor;
        Angle       _rotation;
        Style       _style;
        bool        _visible;
    };


    /**
     * Creates an RectanlgeNode annotation.
     */
    class CreateRectangleNodeCommand : public Command
    {
    public:
        CreateRectangleNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            const Distance&    width,
            const Distance&    height,
            const Style&       style,
            bool               draped,
            bool               visible=true);

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        Distance    _width, _height;
        Style       _style;
        bool        _draped;
        bool        _visible;
    };


    /**
     * Creates an FeatureNode annotation.
     */
    class CreateFeatureNodeCommand : public Command
    {
    public:
        CreateFeatureNodeCommand(
            const std::string& id,
            Geometry*          geom,
            const Style&       style,
            bool               draped,
            bool               visible=true);
    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        osg::ref_ptr<Geometry> _geom;
        Style       _style;
        bool        _draped;
        bool        _visible;
    };


    /**
     * Creates an LocalGeometryNode annotation.
     */
    class CreateLocalGeometryNodeCommand : public Command
    {
    public:
        CreateLocalGeometryNodeCommand(
            const std::string& id,
            const GeoPoint&    location,
            Geometry*          geom,
            const Style&       style,
            bool               draped,
            bool               visible=true);

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
        osg::ref_ptr<Geometry> _geom;
        Style       _style;
        bool        _draped;
        bool        _visible;
    };


    /**
     * Sets the position of a localized annotation node.
     */
    class SetAnnotationNodePositionCommand : public Command
    {
    public:
        SetAnnotationNodePositionCommand(
            const std::string& id,
            const GeoPoint&    location );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        GeoPoint    _location;
    };


    /**
     * Sets the visibility of an annotation node.
     */
    class SetAnnotationNodeVisibilityCommand : public Command
    {
    public:
        SetAnnotationNodeVisibilityCommand(
            const std::string& id,
            bool               visible );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        bool        _visible;
    };


    /**
     * Gets the bounds of an annotation node.
     */
    class GetAnnotationNodeBoundsCommand : public Command
    {
    public:
        GetAnnotationNodeBoundsCommand(
            const std::string& id );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
    };


    /**
     * Removes an annotation node.
     */
    class RemoveAnnotationNodeCommand : public Command
    {
    public:
        RemoveAnnotationNodeCommand(
            const std::string& id );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
    };


    /**
     * Enable or disable the Editor for an Annotation.
     */
    class ToggleAnnotationNodeEditorCommand : public Command
    {
    public:
        ToggleAnnotationNodeEditorCommand(
            const std::string& id,
            bool               enabled );

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        bool        _enabled;
    };


    /**
     * Gets the color properties of an Annotation's Style.
     */
    class GetAnnotationColorsCommand : public Command
    {
    public:
        GetAnnotationColorsCommand(
            const std::string& id);

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
    };


    /**
     * Sets the color properties of an Annotation's Style.
     */
    class SetAnnotationColorsCommand : public Command
    {
    public:
        SetAnnotationColorsCommand(
            const std::string& id,
            const std::string& fill,
            const std::string& stroke,
            const std::string& opacity);

    public:
        class Factory : public CommandFactory {
            virtual Command* create(const std::string& cmd, const CommandArguments& args );
        };
        virtual bool operator()( MapControl* map );

    protected:
        std::string _id;
        std::string _fill;
        std::string _stroke;
        std::string _opacity;
    };

}
#endif GODZIWEBCONTROL_ANNOTATIONS_H