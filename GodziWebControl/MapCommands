#ifndef GODZIWEBCONTROL_MAPCOMMANDS
#define GODZIWEBCONTROL_MAPCOMMANDS 1

#include <GodziWebControl/Export>
#include <GodziWebControl/Command>
#include <GodziWebControl/MapControl>


namespace GodziWebControl
{
    class GODZIWEBCONTROL_EXPORT SetMapCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        SetMapCommand(const std::string &mapFile);

        virtual bool operator()(MapControl* map);
    private:
        std::string _mapFile;
    };

    class GODZIWEBCONTROL_EXPORT SetOverviewCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        SetOverviewCommand(const std::string &mapFile, MapControl::OverviewPosition position);

        virtual bool operator()(MapControl* map);
    private:
        std::string _mapFile;
        MapControl::OverviewPosition _position;
    };

    class GODZIWEBCONTROL_EXPORT ShowOverviewCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ShowOverviewCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT HideOverviewCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        HideOverviewCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT GetBackColorCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        GetBackColorCommand();
        bool operator ()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT SetBackColorCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };
        SetBackColorCommand(const osg::Vec4f &color);
        bool operator ()(MapControl* map);
    private:
        osg::Vec4f _color;
    };

    class GODZIWEBCONTROL_EXPORT ChangeVisibilityCommand : public Command
    {
    public:

        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ChangeVisibilityCommand(const std::string &id, bool visible);
        virtual bool operator()(MapControl* map);

    private:
        std::string _id;
        bool _visible;
    };

    class GODZIWEBCONTROL_EXPORT GetViewpointCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        GetViewpointCommand();

        virtual bool operator()(MapControl* map);

    private:
        osgEarth::Util::Viewpoint _viewpoint;
        double _transitionTime;
    };


    class GODZIWEBCONTROL_EXPORT SetViewpointCommand : public Command
    {
    public:
        class GODZIWEBCONTROL_EXPORT Factory : public CommandFactory
        {
        public:
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        SetViewpointCommand(const osgEarth::Util::Viewpoint& viewpoint, double transitionTime);

        virtual bool operator()(MapControl* map);

    private:
        osgEarth::Util::Viewpoint _viewpoint;
        double _transitionTime;
    };

    class GODZIWEBCONTROL_EXPORT ShowSkyCommand : public Command
    {
    public:
      class GODZIWEBCONTROL_EXPORT Factory : public CommandFactory
        {
        public:
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ShowSkyCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT SetSkyDateTimeCommand : public Command
    {
    public:
      class GODZIWEBCONTROL_EXPORT Factory : public CommandFactory
        {
        public:
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        SetSkyDateTimeCommand(int year, int month, int day, double timeUTC);

        virtual bool operator()(MapControl* map);

    private:
        int _year;
        int _month;
        int _day;
        double _time;
    };

    class GODZIWEBCONTROL_EXPORT ToggleStatsCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ToggleStatsCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT CyclePolygonModeCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        CyclePolygonModeCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT HomeCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        HomeCommand();

        virtual bool operator()(MapControl* map);
    };

    class GODZIWEBCONTROL_EXPORT GetNamesCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        GetNamesCommand(int x, int y);
        virtual bool operator()(MapControl* map);

    protected:
        int _x;
        int _y;
    }; 

    class GODZIWEBCONTROL_EXPORT GetIntersectionCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        GetIntersectionCommand(int x, int y);
        virtual bool operator()(MapControl* map);

    protected:
        int _x;
        int _y;
    };

    class GODZIWEBCONTROL_EXPORT GetMapProfileCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        GetMapProfileCommand(int x1, int y1, int x2, int y2);
        virtual bool operator()(MapControl* map);

    protected:
        int _x1;
        int _y1;
        int _x2;
        int _y2;
    };

    class GODZIWEBCONTROL_EXPORT GetDescriptionsCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        GetDescriptionsCommand(int x, int y);
        virtual bool operator()(MapControl* map);

    protected:
        int _x;
        int _y;
    };

    class GODZIWEBCONTROL_EXPORT FadeMapCommand : public Command
    {
    public:
        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        FadeMapCommand(float opacity);
        virtual bool operator()(MapControl* map);

    protected:
        float _opacity;
    };

    class GODZIWEBCONTROL_EXPORT ToggleNavDisplayCommand : public Command
    {
    public:
      class GODZIWEBCONTROL_EXPORT Factory : public CommandFactory
        {
        public:
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ToggleNavDisplayCommand(bool visible);

        virtual bool operator()(MapControl* map);

    private:
        bool _visible;
    };

    class GODZIWEBCONTROL_EXPORT SetMultiselectCommand : public Command
    {
    public:

        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        SetMultiselectCommand(bool multiselect);
        virtual bool operator()(MapControl* map);

    private:
        bool _multiselect;
    };

    class GODZIWEBCONTROL_EXPORT ClearSelctionCommand : public Command
    {
    public:

        class Factory : public CommandFactory
        {
            virtual Command* create(const std::string& command, const CommandArguments& args);
        };

        ClearSelctionCommand();
        virtual bool operator()(MapControl* map);
    };
}

#endif //GODZIWEBCONTROL_MAPCOMMANDS