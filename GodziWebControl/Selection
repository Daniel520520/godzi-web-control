#ifndef GODZIWEBCONTROL_SELECTION
#define GODZIWEBCONTROL_SELECTION 1

#include <GodziWebControl/Export>
#include <GodziWebControl/Command>
#include <osg/Node>
#include <osg/View>
#include <osgGA/GUIEventHandler>

namespace GodziWebControl
{
    class GODZIWEBCONTROL_EXPORT SelectionSet : public osg::Referenced
    {
    public:
        SelectionSet( osg::Camera* camera );

        void add( osg::Node* node );

        void remove( osg::Node* node );

        void toggle( osg::Node* node, bool selected );

        void clear();

        void setHighlighted( bool enabled );

        void setNodeMask( unsigned int mask );

        void flash( osg::Node* node, double seconds );

        void toggleIsolate( osg::Node* nodeToReplace, bool isolate );

    private:

        void setNodeMask( osg::Node* node, unsigned int mask );

        void setHighlighted( osg::Node* node, bool enabled );

        void reset( osg::Node* node );

    private:

        virtual ~SelectionSet();

        bool _highlighted;
        unsigned int _nodeMask;
        unsigned int _isolateNodeMask;
        osg::ref_ptr<osg::Group> _isolateGroup;
        osg::ref_ptr<osg::Node> _isolateNodeToReplace;

        osg::observer_ptr<osg::Camera> _camera;

        osg::ref_ptr<osgGA::GUIEventHandler> _flashHandler;

        struct NodeBackup : public osg::Referenced {
            osg::ref_ptr<osg::StateSet> _stateSet;
            unsigned int _nodeMask;
        };

        typedef std::map< osg::ref_ptr<osg::Node>, osg::ref_ptr<NodeBackup> > NodeSet;
        NodeSet _nodes;
    };


    class GODZIWEBCONTROL_EXPORT ToggleObjectSelectedCommand : public Command
    {
    public:
        ToggleObjectSelectedCommand( const CommandArguments& args );
        bool operator ()( MapControl* map );
    private:
        std::string _description, _name;
        bool _selected;
    };

    class GODZIWEBCONTROL_EXPORT ClearSelectionCommand : public Command
    {
    public:
        ClearSelectionCommand( const CommandArguments& args );
        bool operator ()( MapControl* map );
    };

    struct GODZIWEBCONTROL_EXPORT HighlightSelectionCommand : public Command {
        HighlightSelectionCommand( const CommandArguments& args );
        bool operator()( MapControl* map );
        bool _enabled;
    };

    struct GODZIWEBCONTROL_EXPORT ToggleIsolateSelectionCommand : public Command {
        ToggleIsolateSelectionCommand( const CommandArguments& args );
        bool operator()( MapControl* map );
        std::string _name, _description;
        bool _isolate;
    };

    struct GODZIWEBCONTROL_EXPORT FlashObjectCommand : public Command {
        FlashObjectCommand( const CommandArguments& args );
        bool operator()( MapControl* map );
        std::string _tag;
        double _duration_s;
    };

    struct GODZIWEBCONTROL_EXPORT SelectionCommandFactory : public CommandFactory
    {
        Command* create(const std::string& command, const CommandArguments& args) {
            if ( "toggleObjectSelected" == command )
                return new ToggleObjectSelectedCommand( args );
            else if ( "clearSelection" == command )
                return new ClearSelectionCommand( args );
            else if ( "highlightSelection" == command )
                return new HighlightSelectionCommand( args );
            else if ( "toggleIsolateSelection" == command )
                return new ToggleIsolateSelectionCommand( args );
            else if ( "flashObject" == command )
                return new FlashObjectCommand( args );
            else
                return NULL;
        }
    };
}

#endif // GODZIWEBCONTROL_SELECTION
