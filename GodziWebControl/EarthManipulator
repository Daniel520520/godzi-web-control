//#ifndef OSGEARTH_EARTH_MANIPULATOR_H
//#define OSGEARTH_EARTH_MANIPULATOR_H 1
//
//#include <GodziWebControl/Export>
//#include <GodziWebControl/Viewpoint>
//
//#include <osg/Vec3d>
//#include <osg/Quat>
//
//#include <osgGA/MatrixManipulator>
//
//#include <osgSim/HeightAboveTerrain>
//
//
//namespace GodziWebControl
//{
//    class GODZIWEBCONTROL_EXPORT EarthManipulator : public osgGA::MatrixManipulator
//    {
//    public:      
//        EarthManipulator();
//
//        virtual const char* className() const { return "Earth"; }
//
//        /** set the position of the matrix manipulator using a 4x4 Matrix.*/
//        virtual void setByMatrix(const osg::Matrixd& matrix);
//
//        /** set the position of the matrix manipulator using a 4x4 Matrix.*/
//        virtual void setByInverseMatrix(const osg::Matrixd& matrix) { setByMatrix(osg::Matrixd::inverse(matrix)); }
//
//        /** get the position of the manipulator as 4x4 Matrix.*/
//        virtual osg::Matrixd getMatrix() const;
//
//        /** get the position of the manipulator as a inverse matrix of the manipulator, typically used as a model view matrix.*/
//        virtual osg::Matrixd getInverseMatrix() const;
//
//        /** Attach a node to the manipulator. 
//            Automatically detaches previously attached node.
//            setNode(NULL) detaches previously nodes.
//            Is ignored by manipulators which do not require a reference model.*/
//        virtual void setNode(osg::Node*);
//
//        /** Return node if attached.*/
//        virtual const osg::Node* getNode() const;
//
//        /** Return node if attached.*/
//        virtual osg::Node* getNode();
//
//        /** Move the camera to the default position. 
//            May be ignored by manipulators if home functionality is not appropriate.*/
//        virtual void home(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter& us);
//
//        virtual void home(double /*currentTime*/);
//
//        /** Compute the home position.*/ 
//        virtual void computeHomePosition();
//
//        double getRadius();
//        
//        /** Start/restart the manipulator.*/
//        virtual void init(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter& us);
//
//        /** handle events, return true if handled, false otherwise.*/
//        virtual bool handle(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter& us);
//
//        /*Sets whether or not smoothing is enabled for the manipulator */
//        void setSmoothingEnabled(const bool &value) { _smoothingEnabled = value; }
//
//        /*Gets whether or not smoothing is enabled for the manipulator */
//        const bool &getSmoothingEnabled() const {return _smoothingEnabled;}
//
//        const double &getPitchSmoothing() const {return _pitchSmoothing;}
//        void setPitchSmoothing(const double &smoothing);
//        
//        const double &getHeadingSmoothing() const {return _headingSmoothing;}
//        void setHeadingSmoothing(const double &smoothing);
//
//        const double &getCenterSmoothing() const {return _centerSmoothing;}
//        void setCenterSmoothing(const double &smoothing);
//
//        /**Gets the current viewpoint*/
////        Viewpoint getCurrentViewpoint();
//
//        /**
//        *Sets the viewpoint of the maniuplator
//        *@param viewpoint
//        *       The viewpoint to move to
//        *@param time
//        *       The number of seconds to spend going from the current viewpoint to the given viewpoint.
//        *       If time is 0, the camera will jump immediately to the given viewpoint
//        */
//        void setViewpoint(const Viewpoint& viewpoint, double time = 0.0);
//
//        /*Makes the camera go north up*/
//        void goNorthUp();
//
//        /*
//         * Positions the camera so the center is at the given x y.  If the node is in geocentric coordinates, it is assumed that the 
//         * coordinates will be given as longtiude and latitude in radians.  Otherwise, the values are in the native coordinate system of the scene.
//         */
//        void lookAtXY(const double &x, const double &y);
//
//        /*Gets the double click zoom ratio*/
//        const double &getDoubleClickZoomRatio() const {return _doubleClickZoomRatio;}
//
//        /**
//        * Sets the double click zoom ratio for the manipulator.  This is a scale that will be multiplied by the current distance
//        * when the user double clicks in the viewer.  For example, a ratio of 0.5 will zoom in half the distance.  To have no zoom
//        * at all, set the ratio to 1.0
//        */
//        void setDoubleClickZoomRatio(const double &ratio);
//
//        /**
//        * Gets the intersection with the node at the given location.  This performs an intersection by projecting
//        * a ray up and down along the node's up vector.  For a geocentric database, this will be the up vector that the
//        * geocentric "loc".
//        * @param loc
//        *        The location to intersect against.
//        * @param hit
//        *        The hit location.  If this function returns false, the value of hit will be equal to loc
//        * @returns
//        *        Whether or not an intersection was found.
//        */
//        bool getIntersectionAtLocation(const osg::Vec3d &loc, osg::Vec3d& hit);
//
//        /**
//        * Utility method that performs the same function as getIntersectionAtLocation but
//        * takes the latitude and longitude in radians rather than native coordinates.
//        * Note:  This method will only work when viewing a geocentric database.
//        */
//        bool getIntersectionAtLatLon(const double &latRadians, const double &lonRadians, osg::Vec3d& hit);
//
//        /**
//        * Begins a jump from the current viewpoint to a viewpoint with the given center and distance.
//        * @param center
//        *        The goal center
//        * @param distance
//        *        The goal distance
//        */
//        void jumpTo(const osg::Vec3d &center, double distance, double heading, double pitch, double time);
//        
//        /**
//        *Sets the amount of time between the current view point and the goal viewpoint when double clicking
//        */
//        void setDoubleClickJumpTime(double doubleClickJumpTime);
//
//        /**
//        *Gets the amount of time between the current view point and the goal viewpoint when double clicking
//        */
//        double getDoubleClickJumpTime();
//
//        /*
//        * Cancels a jump if one is currently being performed
//        */
//        void cancelJump();
//
//    protected:
//
//
//
//        double getHeightAboveTerrain();
//
//        void setDistance(const double &distance, bool smooth);
//        void setCenter(const osg::Vec3d &center, bool smooth);
//        void setHeading(const double &heading, bool smooth);
//        void setPitch(const double &pitch, bool smooth);
//
//        osg::Matrixd getRotation(const osg::Vec3d &center) const;
//
//        bool intersect(const osg::Vec3d& start, const osg::Vec3d& end, osg::Vec3d& intersection) const;
//
//        void computePosition(const osg::Vec3d& eye,const osg::Vec3d& lv,const osg::Vec3d& up);
//
//        bool update(double dt);
//
//        virtual ~EarthManipulator();
//
//        /** Reset the internal GUIEvent stack.*/
//        void flushMouseEventStack();
//
//        /** Add the current mouse GUIEvent to internal stack.*/
//        void addMouseEvent(const osgGA::GUIEventAdapter& ea);
//
//        // Internal event stack comprising last two mouse events.
//        osg::ref_ptr<const osgGA::GUIEventAdapter> _ga_t1;
//        osg::ref_ptr<const osgGA::GUIEventAdapter> _ga_t0;
//
//        bool _jumping;
//        osg::Vec3d _center;
//        osg::Vec3d _startCenter;
//        osg::Vec3d _goalCenter;
//        double _centerSmoothing;
//
//        osg::Quat _rotation;
//
//        double _currTime;
//        double _jumpTime;
//        double _previousTime;
//
//        double _distance;
//        double _startDistance;
//        double _goalDistance;
//
//        double _maximumDistance;
//
//        double _distanceSmoothing;
//        double _wheelZoomRatio;
//
//        double _doubleClickZoomRatio;
//        double _doubleClickJumpTime;
//
//        double _pitch;
//        double _startPitch;
//        double _goalPitch;
//        double _pitchSmoothing;
//
//        double _heading;
//        double _startHeading;
//        double _goalHeading;
//        double _headingSmoothing;
//
//        bool _smoothingEnabled;
//
//        double _rangeBoost;
//
//        bool _reverseMouse;
//
//        osg::ref_ptr<osg::Node> _node;
//        osg::ref_ptr<osg::CoordinateSystemNode> _csn;
//        osgSim::HeightAboveTerrain _hat;
//    };
//}
//
//
//#endif //OSGEARTH_EARTH_MANIPULATOR_H
