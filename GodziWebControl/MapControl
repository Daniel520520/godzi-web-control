#ifndef GODZIWEBCONTROL_MAP_CONTROL_H
#define GODZIWEBCONTROL_MAP_CONTROL_H 1


#include <GodziWebControl/Export>
#include <GodziWebControl/TextLabel>
#include <GodziWebControl/GeoIcon>
#include <GodziWebControl/Model>
#include <GodziWebControl/ImageLayer>
#include <GodziWebControl/ElevationLayer>
#include <GodziWebControl/ModelLayer>
#include <GodziWebControl/Command>
#include <GodziWebControl/Selection>
//#include <GodziWebControl/FirstPersonManipulator>

#include <osgGA/StateSetManipulator>
#include <osgViewer/Viewer>
#include <osgViewer/ViewerEventHandlers>
#include <osgTerrain/Terrain>

#include <osgEarthUtil/Controls>
#include <osgEarthUtil/EarthManipulator>
#include <osgEarthUtil/FeatureManipTool>
#include <osgEarthUtil/SkyNode>
#include <osgEarth/Viewpoint>
#include <osgEarth/MapNode>
#include <osgEarth/Map>
#include <osgEarth/MapModelChange>
#include <osgEarth/JsonUtils>

#include <windows.h>

namespace GodziWebControl
{
    struct MapControlMapCallback;

    class GODZIWEBCONTROL_EXPORT MapControl : public osg::Referenced, public OpenThreads::Thread
    {
    public:

        class EventCallback
        {
        public:
            virtual void handleEvent(const std::string &target, const std::string &eventName, const std::string &data) = 0;
        };

        MapControl();
        virtual void init(void* window);

        void setEventCallback(EventCallback* eventCallback) { _eventCallback = eventCallback; }

        virtual void run();
        virtual int cancel();

        osg::CoordinateSystemNode* getCoordinateSystemsNode() {return _csn.get();}

        CommandQueue* getCommandQueue() {return _commandQueue.get();}

        osgViewer::View* getView() {return _viewer.get();}

        osg::Group* getRoot() {return _root.get();}
        
        osgEarth::Map* getMap() { return _mapNode.get() ? _mapNode->getMap() : 0L; }

        osgEarth::MapNode* getMapNode() { return _mapNode.get(); }

        SelectionSet* getSelectionSet() { return _selectionSet.get(); }

        osgEarth::Util::EarthManipulator* selectEarthManipulator();
        //GodziWebControl::FirstPersonManipulator* selectFirstPersonManipulator();

        void toggleStats();
        void cyclePolygonMode();

        void setMapFile(const std::string &mapFile);

        void showSkyNode();
        void setSkyDateTime(int year, int month, int day, double timeUTC);

        void toggleNavDisplay(bool visible);

        float getVerticalScale();
        void setVerticalScale(float verticalScale);

        float getSampleRatio();
        void setSampleRatio(float sampleRatio);

        void latLongHeightToXYZ(double lat, double lon, double height, double &x, double &y, double &z);
        void xyzToLatLongHeight(double x, double y, double z, double &lat, double &lon, double &height);

        osgEarth::Util::Viewpoint getViewpoint();

        LRESULT handleNativeWindowingEvent( HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam );

        void addCommandFactory(CommandFactory* factory);

        std::string handleCommand(const std::string &command, const std::string &args, bool block);

        void postEvent(const std::string &target, const std::string &eventName, const std::string &data);

        void requestRefresh() { _refreshRequested = true; }

    private:

        osg::ref_ptr<MapControlMapCallback> _mapCallback;
        osg::Vec4 _clearColor;

        osg::ref_ptr<osgViewer::Viewer> _viewer;
        osg::ref_ptr<osg::Group> _root;

        osg::ref_ptr<osgViewer::StatsHandler> _statsHandler;
        osg::ref_ptr<osgGA::StateSetManipulator> _stateSetManipulator;

        osg::ref_ptr<osg::CoordinateSystemNode> _csn;
        osg::ref_ptr<osgTerrain::Terrain> _terrain;

        osg::ref_ptr<GodziWebControl::CommandQueue> _commandQueue;

        osg::ref_ptr<osgEarth::Util::SkyNode> _skyNode;
        osgEarth::Util::FeatureManipTool* _manipTool;
        osg::ref_ptr<osgEarth::Util::Controls::LabelControl> _manipLabel;

        HWND    _hwnd;
        WNDPROC _previousWindowProcedure;
        bool    _paintRequested;
        bool    _refreshRequested;

        //osg::ref_ptr<osg::Node> _rootNode;
        osg::ref_ptr<osgEarth::MapNode> _mapNode;

        typedef std::vector< osg::ref_ptr<CommandFactory> > CommandFactoryList;
        CommandFactoryList _commandFactories;

        EventCallback* _eventCallback;

        osg::ref_ptr<SelectionSet> _selectionSet;
    };


    struct MapControlMapCallback : public osgEarth::MapCallback
    {
        MapControl* _control;

        MapControlMapCallback(MapControl *control) : _control(control) { }

        void MapControlMapCallback::onMapModelChanged( const osgEarth::MapModelChange& change )
        {
            std::string eventName = "";
            osgEarth::Json::Value eventData;

            switch( change.getAction() )
            {
            case osgEarth::MapModelChange::ADD_ELEVATION_LAYER: 
                eventName = "elevationlayeradded";
                eventData["id"] = change.getLayer()->getUID();
                eventData["index"] = change.getFirstIndex();
                break;
            case osgEarth::MapModelChange::ADD_IMAGE_LAYER:
                eventName = "imagelayeradded";
                eventData["id"] = change.getLayer()->getUID();
                eventData["index"] = change.getFirstIndex();
                break;
            case osgEarth::MapModelChange::ADD_MASK_LAYER:
                eventName = "masklayeradded";
                eventData["id"] = change.getMaskLayer()->getUID();
            case osgEarth::MapModelChange::ADD_MODEL_LAYER:
                eventName = "modellayeradded";
                eventData["id"] = change.getModelLayer()->getUID();
                break;
            case osgEarth::MapModelChange::REMOVE_ELEVATION_LAYER:
                eventName = "elevationlayerremoved";
                eventData["id"] = change.getLayer()->getUID();
                eventData["index"] = change.getFirstIndex();
                break;
            case osgEarth::MapModelChange::REMOVE_IMAGE_LAYER:
                eventName = "imagelayerremoved";
                eventData["id"] = change.getLayer()->getUID();
                eventData["index"] = change.getFirstIndex();
                break;
            case osgEarth::MapModelChange::REMOVE_MASK_LAYER:
                eventName = "masklayerremoved";
                eventData["id"] = change.getMaskLayer()->getUID();
                break;
            case osgEarth::MapModelChange::REMOVE_MODEL_LAYER:
                eventName = "modellayerremoved";
                eventData["id"] = change.getModelLayer()->getUID();
                break;
                onModelLayerRemoved( change.getModelLayer() ); break;
            case osgEarth::MapModelChange::MOVE_ELEVATION_LAYER:
                eventName = "elevationlayermoved";
                eventData["id"] = change.getLayer()->getUID();
                eventData["old_index"] = change.getFirstIndex();
                eventData["new_index"] = change.getSecondIndex();
                break;
            case osgEarth::MapModelChange::MOVE_IMAGE_LAYER:
                eventName = "imagelayermoved";
                eventData["id"] = change.getLayer()->getUID();
                eventData["old_index"] = change.getFirstIndex();
                eventData["new_index"] = change.getSecondIndex();
                break;
            case osgEarth::MapModelChange::MOVE_MODEL_LAYER:
                eventName = "modellayermoved";
                eventData["id"] = change.getModelLayer()->getUID();
                eventData["old_index"] = change.getFirstIndex();
                eventData["new_index"] = change.getSecondIndex();
                break;
            }

            if (eventName.length() > 0)
            {
                osgEarth::Json::FastWriter writer;
                _control->postEvent("", eventName, writer.write(eventData));
            }
        }
    };
}

#endif //GODZIWEBCONTROL_MAP_CONTROL_H